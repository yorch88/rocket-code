# ===== rocket-code API — Makefile =====
PROJECT ?= rocket-code-api
COMPOSE ?= docker compose
API_SVC ?= api
DB_SVC  ?= db
REDIS_SVC ?= redis

PGUSER ?= rocket-user
PGDB   ?= rocket-db
PGHOST ?= localhost
PGPORT ?= 5432

.PHONY: help env build up down restart logs api-bash db-psql migrate revision downgrade test test-int lint fmt curl-health status

help:
	@echo "Available commands:"
	@echo "  make env              # Copy .env.example -> .env (if it doesn’t exist)"
	@echo "  make build            # Build Docker images"
	@echo "  make up               # Start all services in detached mode"
	@echo "  make down             # Stop and clean up (includes volumes)"
	@echo "  make restart          # Restart API service"
	@echo "  make logs             # Show API logs (follow mode)"
	@echo "  make api-bash         # Open a bash shell in the API container"
	@echo "  make db-psql          # Open psql connected to the Postgres from docker-compose"
	@echo "  make migrate          # Run alembic upgrade head"
	@echo "  make revision m='msg' # Create an autogenerated migration with message"
	@echo "  make downgrade        # Run alembic downgrade -1"
	@echo "  make test             # Run unit tests (pytest) inside the container"
	@echo "  make test-int         # Run integration tests (pytest -m integration)"
	@echo "  make lint / fmt       # Run ruff / black formatters"
	@echo "  make curl-health      # Check /health endpoint via curl"
	@echo "  make status           # Quick service status overview"

env:
	@test -f .env || cp .env.example .env && echo 'Environment ready (.env)' || echo '.env already exists'

build:
	$(COMPOSE) build

up:
	$(COMPOSE) up -d

up-build:
	$(COMPOSE) up --build

down:
	$(COMPOSE) down -v

restart:
	$(COMPOSE) restart $(API_SVC)

logs:
	$(COMPOSE) logs -f $(API_SVC)

api-bash:
	$(COMPOSE) exec $(API_SVC) bash || $(COMPOSE) run --rm $(API_SVC) bash

db-psql:
	@echo "psql -> postgres://$(PGUSER)@$(PGHOST):$(PGPORT)/$(PGDB)"
	$(COMPOSE) exec -e PGPASSWORD=R0ck3t4rt1cl35 $(DB_SVC) psql -U $(PGUSER) -d $(PGDB)

migrate:
	$(COMPOSE) exec $(API_SVC) alembic upgrade head

revision:
	@if [ -z "$(m)" ]; then echo "Please specify a message: make revision m='description'"; exit 1; fi
	$(COMPOSE) exec $(API_SVC) alembic revision -m "$(m)" --autogenerate

downgrade:
	$(COMPOSE) exec $(API_SVC) alembic downgrade -1

test:
	$(COMPOSE) exec $(API_SVC) pytest -q

test-int:
	$(COMPOSE) exec $(API_SVC) pytest -q -m "integration"

test-unit:
	$(COMPOSE) exec $(API_SVC) pytest -q -m "unit"

test-cov:
	docker compose run --rm api pytest -q --cov=app --cov-report=term-missing

lint:
	$(COMPOSE) exec $(API_SVC) sh -lc "python -m pip install -q ruff || true; ruff check app"

fmt:
	$(COMPOSE) exec $(API_SVC) sh -lc "python -m pip install -q black || true; black app"

curl-health:
	curl -s http://localhost:8000/health

status:
	$(COMPOSE) ps

lint:
	$(COMPOSE) exec $(API_SVC) sh -lc "python -m pip install -q ruff || true; ruff check app"

lint-full:
	$(COMPOSE) exec $(API_SVC) sh -lc "python -m pip install -q pylint ruff || true; \
	ruff check app && pylint --disable=C0114,C0115,C0116,R0903,R0902 app"
